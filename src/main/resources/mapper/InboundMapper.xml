<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="lcw.lcw2_back.mapper.InboundMapper">
    <!-- 입고 요청서 작성 -->
    <!-- <selectKey> : insert작업 후에 자동으로 생성된 키를 가져옴
            keyProperty : 가져온 키를 저장할 객체 지정
            order="AFTER" : <selectKey>가 실행되는 시점 지정(insert문 실행 후) -->
    <insert id="insertInbound">
        INSERT INTO inbound(user_id, request_date, depart_storage_id, status)
        VALUES (#{userId}, now(),
        (SELECT storage_id FROM storage WHERE storage_name = #{departStorageName}),
                #{status})
        <selectKey keyProperty="inboundId" resultType="long" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <!-- 입고 요청서 작성할 때 품목 추가 -->
    <insert id="insertInboundItem">
        INSERT INTO inbound_item(inbound_id, product_id, quantity)
        VALUES (#{inboundId},
                (SELECT product_id FROM product WHERE product_name = #{productName}),
                #{quantity})
    </insert>






    <!-- 조건을 동적으로 추가하기 위한 기본 조건 WHERE 1=1
    참이라는 뜻으로, 여러 조건을 작성하고 동적 쿼리를 작성할 때 장점이 있다.
    1. 가독성, 유지보수에 좋음
        a. 보고싶은 조건의 AND부분을 참고해서 보면 된다.
        b. 내가 없애고 싶거나 수정하고 싶은 조건의 AND 부분만 없애거나 삭제하면 된다.
    2. 여러 조건을 추가하기 좋다.
        a. 만약 WHERE1=1이 없다면 새로운 조건을 생성해줄 때 마다 이전 조건에도 추가한 조건에 대한 부분을 추가(수정)해줘야 하는데 그냥 새로운 조건만 AND하면 되서 그럴 필요가 없다.-->

    <!--  해당 요청서 조회는 depart_user_id인 출고하는 사용자의 출고요청서 조회  -->
    <select id="selectInboundNotDoneList" resultType="lcw.lcw2_back.domain.inbound.Inbound" parameterType="map">
        SELECT i.inbound_id,
        s_from.storage_name AS departStorageName,
        <!--  GROUP_CONCAT으로 product_name과 quantity를 문자열로 결합 -->
        GROUP_CONCAT(CONCAT(p.product_name, ': ', ii.quantity) SEPARATOR ', ') AS products,
        i.status,
        i.request_date,
        s_to.storage_name AS arriveName,
        u_from.user_id <!-- 요청 아이디 -->
        FROM Inbound i
        JOIN User u_to ON i.user_id = u_to.user_id
        JOIN Storage s_to ON u_to.storage_id = s_to.storage_id
        JOIN Storage s_from ON i.depart_storage_id = s_from.storage_id  <!-- 발송지 -->
        LEFT JOIN User u_from ON s_from.storage_id = u_from.storage_id <!-- 요청서 조회할 아이디를 얻기 위한 JOIN -->
        JOIN Inbound_Item ii ON ii.inbound_id = i.inbound_id
        JOIN Product p ON ii.product_id = p.product_id
        WHERE 1=1
        AND status IN('반려', '미승인', '승인')

        <!-- 상태 필터: APPROVED 또는 NOT APPROVED -->
        <if test="status != null and status != ''">
            AND i.status = #{status}
        </if>


        <!-- 요청 날짜 범위 필터 -->
        <if test="startDate != null and endDate != null">
            AND DATE(i.request_date) BETWEEN #{startDate} AND #{endDate}
        </if>


        <!-- 제품명 필터 (이 부분에서 Product JOIN 조건 추가) -->
        <if test="item != null and item != ''">
            AND p.product_name LIKE CONCAT('%', #{item}, '%')
        </if>

        <!-- 수신지 창고명 필터 -->
        <if test="departStorageName != null and departStorageName != ''">
            AND s_to.storage_name LIKE CONCAT('%', #{departStorageName}, '%')
        </if>

        <!-- 입고 창고명 필터 : 총관리자만 사용 -->
        <if test="arriveName != null and arriveName != ''">
            AND s_from.storage_name LIKE CONCAT('%', #{arriveName}, '%')
        </if>

        <!-- inbound_id로만 그룹화 -->
        GROUP BY i.inbound_id, departStorageName, arriveName, u_to.user_id, i.status, i.request_date

        ORDER BY i.inbound_id DESC
        LIMIT #{skip}, #{size}
    </select>

    <!-- 입고요청서 총 개수 -->
    <select id="getCountInboundNotDoneList" resultType="int">
        SELECT count(*) FROM inbound WHERE status IN ('반려','미승인','승인')
    </select>








    <!-- 입고현황 조회 -->
    <select id="selectInboundDoneList" resultType="lcw.lcw2_back.domain.inbound.Inbound" parameterType="map">
        SELECT i.inbound_id,
        s_to.storage_name AS arriveName,
        <!--  GROUP_CONCAT으로 product_name과 quantity를 문자열로 결합 -->
        GROUP_CONCAT(CONCAT(p.product_name, ': ', ii.quantity) SEPARATOR ', ') AS products,
        i.status,
        i.inbound_complete_date,
        s_from.storage_name AS departStorageName
        FROM Inbound i
        JOIN User u ON i.user_id = u.user_id
        JOIN Storage s_to ON u.storage_id = s_to.storage_id
        JOIN Storage s_from ON i.depart_storage_id = s_from.storage_id  <!-- 발송지 -->
        JOIN inbound_item ii ON ii.inbound_id = i.inbound_id
        JOIN Product p ON ii.product_id = p.product_id
        WHERE 1=1
        AND status IN('승인','출고완료','입고완료')

        <!-- 상태 필터: APPROVED 또는 NOT APPROVED -->
        <if test="status != null and status != ''">
            AND i.status = #{status}
        </if>

        <!-- 요청 날짜 범위 필터 -->
        <if test="startDate != null and endDate != null">
            AND i.inbound_complete_date BETWEEN #{startDate} AND #{endDate}
        </if>

        <!-- 아이템 필터: 특정 제품 이름으로 검색 -->
        <if test="item != null and item != ''">
            AND p.product_name LIKE CONCAT('%', #{item}, '%')
        </if>

        <!-- 수신지 창고명 필터 -->
        <if test="departStorageName != null and departStorageName != ''">
            AND s_to.storage_name LIKE CONCAT('%', #{departStorageName}, '%')
        </if>

        <!-- 입고 창고명 필터 : 총관리자만 사용 -->
        <if test="arriveName != null and arriveName != ''">
            AND s_from.storage_name LIKE CONCAT('%', #{arriveName}, '%')
        </if>

        <!-- inbound_id로만 그룹화 -->
        GROUP BY i.inbound_id, departStorageName, arriveName, i.status, i.request_date

        ORDER BY i.inbound_id DESC
        LIMIT #{skip}, #{size}
    </select>

    <select id="getCountInboundDoneList" resultType="int">
        SELECT count(*) FROM inbound WHERE status IN ('승인','출고완료','입고완료')
    </select>






    <!-- 입고요청 승인하기 -->
    <update id="updateInboundApprove">
        UPDATE Inbound
        SET status = '승인'
        WHERE inbound_id IN (
        <foreach item="id" collection="list" separator=",">
            #{id}
        </foreach>
        )
        AND status = '미승인'
    </update>

    <!--입고요청 반려하기-->
    <update id="updateInboundRejected">
        UPDATE Inbound
        SET status = '반려'
        WHERE inbound_id IN (
        <foreach item="id" collection="list" separator=",">
            #{id}
        </foreach>
        )
        AND status = '미승인'
    </update>


    <!-- 출고요청 출고완료 -->
    <update id="updateInboundCompleteOutbound">
        UPDATE inbound SET status = '출고완료', outbound_complete_date = now() WHERE status LIKE '승인'
    </update>

    <!-- 출고요청 배송완료 -->
    <update id="updateInboundCompleteInbound">
        CALL updateInboundCompleteInbound();
    </update>

</mapper>