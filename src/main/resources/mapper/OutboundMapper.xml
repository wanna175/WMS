<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="lcw.lcw2_back.mapper.OutboundMapper">
    <!-- 출고 요청서 작성 -->
    <!-- <selectKey> : insert작업 후에 자동으로 생성된 키를 가져옴
            keyProperty : 가져온 키를 저장할 객체 지정
            order="AFTER" : <selectKey>가 실행되는 시점 지정(insert문 실행 후)
            if문을 통해 수신지나 마트출고여부 둘 중 하나만 insert하도록 작성-->
    <insert id="insertOutbound">
        INSERT INTO outbound (user_id, request_date
        <if test="arriveStorageId != null or arriveName != null">
            , arrive_storage_id
        </if>
        <if test="outboundMart != null">
            , outbound_mart
        </if>
        )
        VALUES (#{userId}, now()
        <if test="arriveStorageId == null and arriveName != null">
            , (SELECT storage_id FROM storage WHERE storage_name = #{arriveName})
        </if>
        <if test="outboundMart != null">
            , #{outboundMart}
        </if>
        )
        <selectKey keyProperty="outboundId" resultType="long" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>


    <!-- 출고 요청서 작성할 때 품목 추가 -->
    <insert id="insertOutboundItem">
        INSERT INTO outbound_item(outbound_id, product_id, quantity)
        VALUES (#{outboundId},
                (SELECT product_id FROM product WHERE product_name = #{productName}),
                #{quantity})
    </insert>






    <!-- 조건을 동적으로 추가하기 위한 기본 조건 WHERE 1=1
    참이라는 뜻으로, 여러 조건을 작성하고 동적 쿼리를 작성할 때 장점이 있다.
    1. 가독성, 유지보수에 좋음
        a. 보고싶은 조건의 AND부분을 참고해서 보면 된다.
        b. 내가 없애고 싶거나 수정하고 싶은 조건의 AND 부분만 없애거나 삭제하면 된다.
    2. 여러 조건을 추가하기 좋다.
        a. 만약 WHERE1=1이 없다면 새로운 조건을 생성해줄 때 마다 이전 조건에도 추가한 조건에 대한 부분을 추가(수정)해줘야 하는데 그냥 새로운 조건만 AND하면 되서 그럴 필요가 없다.-->
    <!--  해당 요청서 조회는 arrive_user_id인 입고받는 사용자의 입고요청서 조회  -->
    <select id="selectOutboundNotDoneList" resultType="lcw.lcw2_back.domain.outbound.Outbound" parameterType="map">
        SELECT
        o.outbound_id,
        s_from.storage_name AS departStorageName,

        <!-- arrive_storage_name 설정: arrive_storage_id가 NULL이면 '귤로벌마트' -->
        CASE
        WHEN o.arrive_storage_id IS NULL THEN '귤로벌마트'
        ELSE s_to.storage_name
        END AS arriveName,

        u_from.user_id AS outbound_user_id, <!-- 요청한 담당자 아이디 -->
        <!-- u_to.user_id AS arrive_user_id, 요청서 조회할 아이디 -->

        <!--  GROUP_CONCAT으로 product_name과 quantity를 문자열로 결합 -->
        GROUP_CONCAT(CONCAT(p.product_name, ': ', oi.quantity) SEPARATOR ', ') AS products,

        o.status,
        o.request_date
        FROM Outbound o
        JOIN User u_from ON o.user_id = u_from.user_id
        JOIN Storage s_from ON u_from.storage_id = s_from.storage_id
        LEFT JOIN Storage s_to ON o.arrive_storage_id = s_to.storage_id
        LEFT JOIN User u_to ON s_to.storage_id = u_to.storage_id <!-- 요청서 조회할 아이디를 얻기 위한 JOIN -->
        JOIN Outbound_Item oi ON oi.outbound_id = o.outbound_id
        JOIN Product p ON oi.product_id = p.product_id
        WHERE 1=1
        AND o.status IN ('반려', '미승인', '승인')

        <!-- 상태 필터 -->
        <if test="status != null and status != ''">
            AND o.status = #{status}
        </if>

        <!-- 요청 날짜 범위 필터 -->
        <if test="startDate != null and endDate != null">
            AND o.request_date BETWEEN #{startDate} AND #{endDate}
        </if>

        <!-- 제품명 필터 (이 부분에서 Product JOIN 조건 추가) -->
        <if test="item != null and item != ''">
            AND p.product_name LIKE CONCAT('%', #{item}, '%')
        </if>

        <!-- 수신지 창고명 필터 -->
        <if test="arriveName != null and arriveName != ''">
            AND s_to.storage_name LIKE CONCAT('%', #{arriveName}, '%')
        </if>

        <!-- 출고 창고명 필터 -->
        <if test="outboundStorageName != null and outboundStorageName != ''">
            AND s_from.storage_name LIKE CONCAT('%', #{outboundStorageName}, '%')
        </if>

        <!-- 마트 여부 필터 -->
        <if test="outboundMart != null and outboundMart != ''">
            AND o.outbound_mart = #{outboundMart}
        </if>

        <!-- outbound_id로만 그룹화 -->
        GROUP BY o.outbound_id, departStorageName, arriveName, u_from.user_id, u_to.user_id, o.status, o.request_date

        ORDER BY o.outbound_id DESC
        LIMIT #{skip}, #{size}
    </select>

    <!-- 출고요청서 총 개수 -->
    <select id="getCountOutboundNotDoneList" resultType="int">
        SELECT count(*) FROM outbound WHERE status IN ('반려', '미승인', '승인')
    </select>





    <!-- 출고현황 조회 -->
    <select id="selectOutboundDoneList" resultType="lcw.lcw2_back.domain.outbound.Outbound" parameterType="map">
        SELECT o.outbound_id,
        <!-- arrive_storage_name 설정: arrive_storage_id가 NULL이면 '귤로벌마트' -->
        CASE
        WHEN o.arrive_storage_id IS NULL THEN '귤로벌마트'
        ELSE s_to.storage_name
        END AS arriveName,
        <!--  GROUP_CONCAT으로 product_name과 quantity를 문자열로 결합 -->
        GROUP_CONCAT(CONCAT(p.product_name, ': ', oi.quantity) SEPARATOR ', ') AS products,
        o.status,
        o.inbound_complete_date,
        s_from.storage_name AS departStorageName
        FROM Outbound o
        JOIN User u ON o.user_id = u.user_id
        JOIN Storage s_from ON u.storage_id = s_from.storage_id
        LEFT JOIN Storage s_to ON o.arrive_storage_id = s_to.storage_id
        JOIN Outbound_Item oi ON oi.outbound_id = o.outbound_id
        JOIN Product p ON oi.product_id = p.product_id
        WHERE 1=1
        AND status IN('승인', '출고완료', '입고완료')

        <!-- 상태 필터: APPROVED 또는 NOT APPROVED -->
        <if test="status != null and status != ''">
            AND o.status = #{status}
        </if>

        <!-- 요청 날짜 범위 필터 -->
        <if test="startDate != null and endDate != null">
            AND o.inbound_complete_date BETWEEN #{startDate} AND #{endDate}
        </if>

        <!-- 제품명 필터 (이 부분에서 Product JOIN 조건 추가) -->
        <if test="item != null and item != ''">
            AND p.product_name LIKE CONCAT('%', #{item}, '%')
        </if>

        <!-- 수신지 창고명 필터 -->
        <if test="arriveName != null and arriveName != ''">
            AND s_to.storage_name LIKE CONCAT('%', #{arriveName}, '%')
        </if>

        <!-- 출고 창고명 필터 : 총관리자만 사용 -->
        <if test="outboundStorageName != null and outboundStorageName != ''">
            AND s_from.storage_name LIKE CONCAT('%', #{outboundStorageName}, '%')
        </if>

        <!-- 마트 여부 필터 -->
        <if test="outboundMart != null and outboundMart != ''">
            AND o.outbound_mart = #{outboundMart}
        </if>

        GROUP BY o.outbound_id, s_from.storage_name, arriveName, o.status

        ORDER BY o.outbound_id DESC
        LIMIT #{skip}, #{size}
    </select>

    <select id="getCountOutboundDoneList" resultType="int">
        SELECT count(*) FROM outbound WHERE status IN ('승인', '출고완료', '입고완료')
    </select>






    <!-- 출고요청 승인하기 -->
    <update id="updateOutboundApprove">
        UPDATE Outbound
        SET status = '승인'
        WHERE outbound_id IN (
        <foreach item="id" collection="list" separator=",">
            #{id}
        </foreach>
        )
        AND status = '미승인'
    </update>

    <!--출고요청 반려하기-->
    <update id="updateOutboundRejected">
        UPDATE Outbound
        SET status = '반려'
        WHERE outbound_id IN (
        <foreach item="id" collection="list" separator=",">
            #{id}
        </foreach>
        )
        AND status = '미승인'
    </update>

    <!-- 출고 취소-->
    <update id="updateOutboundDoneRejected">
        UPDATE Outbound
        SET status = '반려'
        WHERE outbound_id IN (
        <foreach item="id" collection="list" separator=",">
            #{id}
        </foreach>
        )
        AND status = '승인'
    </update>

    <!-- 출고요청 출고완료 -->
    <update id="updateOutboundCompleteOutbound">
        UPDATE outbound SET status = '출고완료', outbound_complete_date = now() WHERE status LIKE '승인'
    </update>

    <!-- 출고요청 배송완료 -->
    <update id="updateOutboundCompleteInbound">
        CALL updateOutboundCompleteInbound();
    </update>

</mapper>